/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("let searchBar = document.createElement('input');\nsearchBar.type = 'text';\nsearchBar.id = 'searchBar';\nsearchBar.placeholder = 'Search the category...';\ndocument.body.appendChild(searchBar);\n\nlet searchButton = document.createElement('button');\nsearchButton.id = 'searchButton';\nsearchButton.textContent = 'Go';\ndocument.body.appendChild(searchButton);\n\nlet resultsElement = document.createElement('ul');\nresultsElement.id = 'results';\ndocument.body.appendChild(resultsElement);\n\n\nlet errorMessageElement = document.createElement('p');\nerrorMessageElement.id = 'error-message';\ndocument.body.appendChild(errorMessageElement);\n\nsearchButton.addEventListener('click', searchBooks);\nsearchBar.addEventListener('keydown', (e) => {\n  if (e.key === 'Enter') {\n    searchBooks();\n  }\n});async function searchBooks() {\n    try {\n        const categoryValue = await getSearchBarValue();\n        const data = await fetchSubjectData(categoryValue);\n        displayResults(data);\n    } catch (error) {\n        displayErrorMessage(error);\n    }\n}\nfunction getSearchBarValue() {\n    return new Promise((resolve, reject) => {\n        const category = document.getElementById('searchBar');\n        if (!category) {\n            reject(new Error('Search bar not found'));\n            return;\n        }\n        const categoryValue = category.value.trim();\n        if (!categoryValue) {\n            reject(new Error('Category value is empty'));\n            return;\n        }\n        resolve(categoryValue);\n    });\n}\n\nasync function fetchSubjectData(categoryValue) {\n    try {\n        if (!categoryValue) {\n            throw new Error('Category value is empty');\n        }\n        const response = await fetch(`https://openlibrary.org/subjects/${categoryValue}.json`);\n        if (!response.ok) {\n            throw new Error('Bad Request');\n        }\n        const body = await response.json();\n        return body;\n    }   catch (error) {\n        console.error(error);\n        throw error;\n    }\n}\nasync function displayResults(data) {\n    const resultsElement = document.getElementById('results');\n    if (!resultsElement) {\n        throw new Error('Results element not found');\n    }\n    resultsElement.textContent = '';\n    if (!data || !data.works) {\n        throw new Error('Invalid data');\n    }\n    data.works.forEach(async (result) => {\n\n        const authors = result.authors ? result.authors.map(author => author.name).join(', ') : '';\n        const resultElement = document.createElement('li');\n        resultElement.textContent = `${result.title || ''} by ${authors}`;\n        resultElement.id = 'resultElement';\n        resultElement.dataset.bookKey = result.key; \n        resultsElement.appendChild(resultElement);\n\n        const descriptionContainer = document.createElement('div');\n        descriptionContainer.id = 'descriptionContainer';\n        resultElement.appendChild(descriptionContainer);\n\n        const descriptionElement = document.createElement('p');\n        descriptionElement.id = 'descriptionElement';\n        descriptionElement.textContent = 'Ops... no description available';\n        descriptionElement.dataset.bookKey = result.key;\n        descriptionContainer.appendChild(descriptionElement);\n        descriptionContainer.style.display = 'none';\n\n        resultElement.addEventListener('click', function(event) {\n            const target = event.target;\n            const clickedDescriptionContainer = target.querySelector('#descriptionContainer');\n        \n            if (clickedDescriptionContainer) {\n                const allDescriptionContainers = document.querySelectorAll('#descriptionContainer');\n                allDescriptionContainers.forEach(container => {\n                    if (container !== clickedDescriptionContainer) {\n                        container.style.display = 'none';\n                    }\n                });\n        \n                clickedDescriptionContainer.style.display = clickedDescriptionContainer.style.display === 'none' ? 'block' : 'none';\n            }\n        });\n\n        fetchBookData(result.key).then(bookData => {\n            if (!bookData) {\n                console.error(\"fetchBookData failed\");\n                return;\n            }\n            console.log(\"fetchBookData success\", bookData);\n            const descriptionText = document.createElement('p');\n            descriptionText.textContent = bookData.description.value || bookData.description;\n            descriptionElement.innerHTML = '';\n            descriptionElement.appendChild(descriptionText);\n        }).catch(error => {\n            console.error(\"fetchBookData failed: \", error);\n        });\n        });\n}\n\nasync function fetchBookData(bookKey) {\n  try {\n    const response = await fetch(`https://openlibrary.org${bookKey}.json`);\n    if (response.status === 303) {\n      const newUrl = response.headers.get('Location');\n      const newResponse = await fetch(newUrl);\n      const data = await newResponse.json();\n      return data;\n    } else if (!response.ok) {\n      throw new Error('Failed to fetch book data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching book data:', error);\n    return null;\n  }\n}\n\n\n\n\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;